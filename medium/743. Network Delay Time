class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        
        vector<vector<pair<int, int>>>graph(n + 1);
        
        for(auto edge: times){
            int from = edge[0];
            int to = edge[1];
            int weight = edge[2];
            
            graph[from].push_back({to, weight});
        }
        
        vector<int>distance(n + 1, INT_MAX);
        distance[k] = 0;
        
        // pair goes like dist-node
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>>pq;
        pq.push({0, k});
        
        while(pq.size() != 0){
            auto p = pq.top();
            pq.pop();
            
            int currnode = p.second;
            int currdist = p.first;
            
            for(auto node_dist_pair: graph[currnode]){
                int neighbour = node_dist_pair.first;
                int currweight = node_dist_pair.second;
                
                if(distance[neighbour] > currdist + currweight){
                    distance[neighbour] = currdist + currweight;
                    pq.push({distance[neighbour], neighbour});
                }
            }
        }
        
        int time = INT_MIN;
        
        for(int i = 1; i <= n; i++){
            if(distance[i] == INT_MAX)
                return -1;
            time = max(time, distance[i]);
        }
        return time;
        
    }
};
