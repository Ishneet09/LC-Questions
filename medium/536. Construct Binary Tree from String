/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    
    int getValue(string s, int& index){
        string number = "";
        
        while(s[index] != '(' && s[index] != ')' && index < s.size()){
            number += s[index];
            index++;
        }
        return stoi(number);
    }
    
public:
    TreeNode* str2tree(string s) {
        if(s.size() == 0)
            return NULL;
        
        int index = 0;
        int rootValue = getValue(s, index);
        TreeNode* root = new TreeNode(rootValue);
        
        stack<TreeNode*>nodeStack;
        nodeStack.push(root);
        
        while(index < s.size()){
            
            if(s[index] == '('){
                // inc index to get the value
                index++;
                int currValue = getValue(s, index);
                TreeNode* currNode = new TreeNode(currValue);
                nodeStack.push(currNode);
                continue;
            }
            
            // char is )=> so I now must make coonections
            TreeNode* child = nodeStack.top();
            nodeStack.pop();
            TreeNode* parent = nodeStack.top();
            
            if(parent->left == NULL){
                parent->left = child;
            }
            else {
                parent->right = child;
            }
            // to move on to nect char
            index++;
        }
        
        return nodeStack.top();
    }
};
