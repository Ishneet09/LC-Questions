/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    int processVector(vector<int>v){
        if(v.size() == 0)
            return 0;
        
        int power = v.size() - 1;
        int sum = 0;
        
        for(int num : v){
            sum += (num * pow(10, power));
            power--;
        }
        
        return sum;
    }
    
    
    void helper(TreeNode* root, int& sum, vector<int>& currPath){
        if(root->left == NULL && root->right == NULL){
            //process current path
            currPath.push_back(root->val);
            sum += processVector(currPath);
            return;
        }
        
        currPath.push_back(root->val);
        
        if(root->left){
           helper(root->left, sum, currPath);
           currPath.pop_back();

        }
        
        if(root->right){
          helper(root->right, sum, currPath);
          currPath.pop_back();

        }
    }
    
    
    int sumNumbers(TreeNode* root) {
        if(root == NULL)
            return 0;
        
        int sum = 0;
        vector<int>currPath;
        
        helper(root, sum, currPath);
        
        return sum;
    }
};




------------------------------solution 2----------------------------


 void helper(TreeNode* root, int& sum, int currNumber){
        
        currNumber = currNumber * 10 + root->val;
        
        if(root->left == NULL && root->right == NULL){
            sum += currNumber;
            return;
        }
        
        if(root->left)
            helper(root->left, sum, currNumber);
        if(root->right)
            helper(root->right, sum, currNumber);
    }
    
    
    
    int sumNumbers(TreeNode* root) {
        if(root == NULL)
            return 0;
        
        int sum = 0;
        vector<int>currPath;
        
        helper(root, sum, 0);
        
        return sum;
    }
};

