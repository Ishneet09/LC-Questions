class Solution {
public:
    
    void dfs(vector<vector<char>>& board, string word, int wordIndex, int i, int j, bool &check){
         if(wordIndex == word.size()){
            check = true;
            return;
        }
        if(i < 0 || j < 0 || i >= board.size() || j >= board[0].size())
            return;
        if(board[i][j] == '0')
            return;
        if(board[i][j] != word[wordIndex])
            return;
        
        board[i][j] = '0';
        
        if(!check){
        dfs(board, word, wordIndex + 1, i + 1, j, check);
        dfs(board, word, wordIndex + 1, i - 1, j, check);
        dfs(board, word, wordIndex + 1, i, j + 1, check);
        dfs(board, word, wordIndex + 1, i, j - 1, check);
        }
        
        board[i][j] = word[wordIndex];
    }
    
    
    bool exist(vector<vector<char>>& board, string word) {
        if(board.size() == 0)
            return false;
        
        int rows = board.size();
        int cols = board[0].size();
        
        for(int i = 0; i < rows; i++){
            for(int j = 0;j < cols; j++){
                if(board[i][j] == word[0]){
                    bool check = false;;
                    dfs(board, word, 0, i, j, check);
                    if(check)
                        return true;
                }
                    
            }
        }
        return false;
    }
};
