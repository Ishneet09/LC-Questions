/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    static bool comp(const pair<int, int>& p1, const pair<int, int>& p2){
        return (p1.first < p2.first) || (p1.first == p2.first && p1.second < p2.second);
    }
    
    void fillMap(TreeNode* root, unordered_map<int, vector<pair<int, int>>>& map, int X, int Y, int& minx, int& maxx){
        if(root == NULL)
            return;
        
        map[X].push_back({Y, root->val});
        minx = min(X, minx);
        maxx = max(X, maxx);

        fillMap(root->left, map, X - 1, Y + 1, minx, maxx);
        fillMap(root->right, map, X + 1, Y + 1, minx, maxx);
}
    
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        if(root == NULL)   
            return {};
        unordered_map<int, vector<pair<int, int>>>map;
        
        int minx = 0, maxx = 0;
        fillMap(root, map, 0, 0, minx, maxx);
        
        vector<vector<int>>ans;
        
        for(int i = minx; i < maxx + 1; i++){
            vector<pair<int,int>>temp = map[i];
            sort(temp.begin(), temp.end(), comp);
            
            vector<int>vals;
            for(pair<int, int> p : temp){
                vals.push_back(p.second);
            }
            ans.push_back(vals);
        }
        return ans;
        
    }
};
