class Solution {
public:
    bool helper(string s, unordered_set<string>& set, int start, vector<int>& memo){
        if(start == s.size())
            return true;
        
        if(memo[start] != -1)
            return memo[start];
        
        for(int end = start + 1; end <= s.size(); end++){
            if(set.find(s.substr(start, end - start)) != set.end() && helper(s, set, end, memo))
                return memo[start] = 1;
        }
        
        return memo[start] = 0;
        
    }
    
    
    bool wordBreak(string s, vector<string>& wordDict) {
        if(s.size() == 0)
            return true;
        
        unordered_set<string>set;
        
        for(string w: wordDict){
            set.insert(w);
        }
        
        vector<int>memo(s.size(), -1);
        
        return helper(s, set, 0, memo);
    }
};
