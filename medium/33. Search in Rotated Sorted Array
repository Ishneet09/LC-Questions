class Solution {
public:
    
    int searchMinIndex(vector<int>& nums){
        int left = 0;
        int right = nums.size();
        
        while(left < right){
            int mid = left + (right - left)/2;
            if(mid < nums.size() - 1 && nums[mid] > nums[mid + 1])
                return mid + 1;
            else if(nums[mid] > nums[left])
                left = mid + 1;
            else
                right = mid;
        }
        
        return left;
    }
    
    int binarySearch(vector<int>& nums, int left, int right, int target){
        while(left <= right){
            int mid = left + (right - left) / 2;
            if(nums[mid] == target)
                return mid;
            else if(nums[mid] < target)
                left  = mid + 1;
            else
                right = mid - 1;
        }
        return - 1;
    }
    
    int search(vector<int>& nums, int target) {
        if(nums.size() == 0)
            return -1;
        if(nums.size() == 1){
            if(nums[0] == target)
                return 0;
            else
                return -1;
        }
        
        int minIndex = searchMinIndex(nums);
        
        int left = 0;
        int right = nums.size() - 1;
        
        if(nums[right] > nums[left])
            return binarySearch(nums, left, right, target);
        
        if(target == nums[minIndex])
            return minIndex;
        if(target == nums[left])
            return left;
        if(target == nums[right])
            return right;
        
        if(target > nums[left] && target < nums[minIndex - 1])
            right = minIndex - 1;
        else if(target < nums[right] && target > nums[minIndex])
            left = minIndex + 1;
        
        return binarySearch(nums, left, right, target);
    }
};
