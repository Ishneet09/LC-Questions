class Solution {
private:
    
    int precedence(char c){
        if(c == '*' || c == '/')
            return 2;
    
        if(c == '+' || c == '-')
            return 1;
        
        return 0;
    }
    
    int calculate(char op, int n1, int n2){
        if(op == '*')
            return n1 * n2;
        if(op == '/')
            return n1 / n2;
        if(op == '+')
            return n1 + n2;
        return n1 - n2;
    }
    
public:
    int calculate(string s) {
        
        if(s.size() == 0)
            return 0;
        
        stack<int>numbers;
        stack<char>operators;
        
        for(int i = 0; i < s.size();){
            char c = s[i];
            
            if(c == ' ')
                continue;
            
            if(c >= '0' && c <= '9'){
                int currNumber = 0;
                while(i < s.size() && s[i] >= '0' && s[i] <= '9'){
                    currNumber = (currNumber * 10) + (s[i] - '0');
                    i++;
                    
                }
                numbers.push(currNumber);
                continue;
            }
            
            if(c == '*' || c == '+' || c == '/' || c == '-'){
                if(operators.size() == 0){
                    operators.push(c);
                    i++;
                    continue;
                }
                if(operators.size() > 0 && (precedence(c) - precedence(operators.top()) >= 0)){
                    operators.push(c);
                    i++;
                    continue;
                }
                else{
                    while(operators.size() > 0 && (precedence(c) - precedence(operators.top()) <= 0)){
                      int number2 = numbers.top();
                      numbers.pop();
                      int number1 = numbers.top();
                      numbers.pop();
                      char current = operators.top();
                      operators.pop();
                      numbers.push(calculate(current, number1, number2));   
                    }
                    operators.push(c);
                    i++;
                }
            }
        }
        
        while(operators.size() != 0){
            char op = operators.top();
            operators.pop();
            int number2 = numbers.top();
            numbers.pop();
            int number1 = numbers.top();
            numbers.pop();
            
            numbers.push(calculate(op, number1, number2));
        }
        
        return numbers.top();
    }
};
