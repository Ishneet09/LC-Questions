/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxPath = 0;
    
    int longestUnivaluePathHelper(TreeNode* root) {
        if(root == NULL)
            return 0;
        
        int leftLen = longestUnivaluePathHelper(root->left);
        int rightLen = longestUnivaluePathHelper(root->right);
        
        int leftCheck = 0;
        int rightCheck = 0;
        
        if(root->left && root->val == root->left->val)
            leftCheck = leftLen + 1;
        
        if(root->right && root->val == root->right->val)
            rightCheck = rightLen + 1;
        
        maxPath = max(maxPath, leftCheck + rightCheck);
        
        return max(leftCheck, rightCheck);
    }
    
    int longestUnivaluePath(TreeNode* root){
     
        
        longestUnivaluePathHelper(root);
        return maxPath;
        
    }
};
