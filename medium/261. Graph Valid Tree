You have a graph of n nodes labeled from 0 to n - 1. You are given an integer n and a list of edges where edges[i] = [ai, bi] indicates that there is an undirected edge between nodes ai and bi in the graph.

Return true if the edges of the given graph make up a valid tree, and false otherwise.

class Solution {
public:
    
    void dfs(int sv, vector<vector<int>>& graph, vector<int>& visited){
        visited[sv] = 1;
        
        for(int n: graph[sv]){
            if(visited[n] != 1)
                dfs(n, graph, visited);
        }
    }
    
    bool isCyclic(int sv, vector<vector<int>>& graph, vector<int>& visited, int parent){
       
        
        visited[sv] = 1;
        
        for(int n: graph[sv]){
            
            if(visited[n] == 0){
                if(isCyclic(n, graph, visited, sv))
                    return true;
            }
            else if(n != parent)
                return true;
        }
        return false;
    }
    
    
    bool validTree(int n, vector<vector<int>>& edges) {
        if(n == 0)
            return true;
        
        if(edges.size() == 0){
            if(n == 1)
                return true;
            else
                return false;
        }
        
        vector<vector<int>>graph(n);
        
        for(auto edge: edges){
            int from = edge[0];
            int to = edge[1];
            
            graph[from].push_back(to);
            graph[to].push_back(from);
        }
        
        
        
        vector<int>visited2(n, 0);
        dfs(0, graph, visited2);
        
        for(int i = 0; i < n; i++){
            if(visited2[i] != 1)
                return false;
        }
        
        vector<int>visited(n, 0);

        for(int i = 0; i < n; i++){
            if(visited[i] == 0 && isCyclic(i, graph, visited, -1))
                // above condition=> cycle exists but tree is not valid hence, false
                return false;
        }
        return true;
       
    }
};
