class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        
        if(grid.size() == 0)
            return 0;
        
        int rows = grid.size();
        int columns = grid[0].size();
        
        if(grid[0][0] == 1 || grid[rows - 1][columns - 1] == 1)
            return -1;
        
        int shortestDistance = 0;
        
        queue<pair<int, int>>bfsQ;
        
        vector<vector<int>>directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}, {-1, 1}, {1, 1}, {1, -1}, {-1, -1}};
        
        vector<vector<bool>>visited(rows, vector<bool>(columns, false));
        
        bfsQ.push({0, 0});
        visited[0][0] = true;
        
        
        while(bfsQ.size() != 0){
            int size = bfsQ.size();
            
            for(int i = 0; i < size; i++){
                auto coordinates = bfsQ.front();
                bfsQ.pop();
                
                int x = coordinates.first;
                int y = coordinates.second;
                
                if(x == rows - 1 && y == columns - 1){
                    shortestDistance++;
                    return shortestDistance;
                }
                
                for(auto direction: directions){
                    int newX = x + direction[0];
                    int newY = y + direction[1];
                    
                    if(newX < 0 || newY < 0 || newX >= rows || newY >= columns)
                        continue;
                    
                    else if(grid[newX][newY] == 1)
                        continue;
                    
                    else if(visited[newX][newY])
                        continue;
                    
                    bfsQ.push({newX, newY});
                    visited[newX][newY] = true;
                }
            }
            shortestDistance++;
        }
        return -1;
    }
};
