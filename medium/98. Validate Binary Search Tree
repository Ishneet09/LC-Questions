-----------------Recursive Solution--------------


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool helper(TreeNode* root, long min, long max){
        if(root == NULL)
            return true;
        
        return (root->val > min && root->val < max) && helper(root->left, min, root->val) && helper(root->right, root->val, max);
    }  
  
    bool isValidBST(TreeNode* root) {
        if(root == NULL)
            return true;
        
        return helper(root, LONG_MIN, LONG_MAX);   
    }
};


------------------Iterative SOLUTION----------

 if(root == NULL)
            return true;
        
        stack<pair<TreeNode*, pair<long, long>>>st;
        st.push({root, {LONG_MIN, LONG_MAX}});
        
        while(st.size() != 0){
            auto current = st.top();
            st.pop();
            
            TreeNode* currRoot = current.first;
            long rootValue = currRoot->val;
            long minVal = current.second.first;
            long maxVal = current.second.second;
            
            if(rootValue <= minVal || rootValue >= maxVal)
                return false;
            
            if(currRoot->left){
                st.push({currRoot->left, {minVal, rootValue}});
            }
            
            if(currRoot->right){
                st.push({currRoot->right, {rootValue, maxVal}});
            }
        }
        
        return true;
