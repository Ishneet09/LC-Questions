/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    TreeNode* buildTreeHelper(vector<int>& inorder, int instart, int inend, vector<int>& postorder, int poststart, int postend, unordered_map<int, int>& rootMapping){
      
        if(poststart > postend || instart > inend)
            return NULL;
        
        int rootValue = postorder[postend];
        TreeNode* root = new TreeNode(rootValue);
        
        int rootIndex = rootMapping[rootValue];
        int len = rootIndex - instart;
        
        // imp differences
        TreeNode* leftRoot = buildTreeHelper(inorder, instart, rootIndex - 1, postorder, poststart, poststart + len - 1, rootMapping);
        TreeNode* rtRoot = buildTreeHelper(inorder, rootIndex + 1, inend, postorder, poststart + len, postend - 1, rootMapping);
        
        root->left = leftRoot;
        root->right = rtRoot;
        
        return root;
    }
    
    
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        if(inorder.size() != postorder.size())
            return NULL;
        
        if(inorder.size() == 0 || postorder.size() == 0)
            return NULL;
        
        unordered_map<int, int>rootMapping;
        
        for(int i = 0 ; i < inorder.size(); i++){
            rootMapping[inorder[i]] = i;
        }
        
        return buildTreeHelper(inorder, 0, inorder.size() - 1, postorder, 0, postorder.size() - 1, rootMapping);
    }
};
