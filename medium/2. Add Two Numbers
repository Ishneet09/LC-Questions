----------[COMMENTED CODE IS MY SOLUTION]--------------

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
     ------------------------------------------------------------- 
      /*  if(l1 == NULL && l2 == NULL)
            return NULL;
        
        if(l1 == NULL)
            return NULL;
            
        if(l2 == NULL)
            return NULL;
        
        ListNode* head = NULL;
        ListNode* tail = NULL;
        int carry = 0;
        
        while(l1 != NULL && l2 != NULL){
            int sum = l1->val + l2->val + carry;
            carry = sum / 10;
            int value = sum % 10;
            
            ListNode* newNode = new ListNode(value);
            
            if(head == NULL){
                head = newNode;
                tail = newNode;
                l1 = l1->next;
                l2 = l2->next;
                continue;
            }
            
            tail->next = newNode;
            tail = newNode;
            
            l1 = l1->next;
            l2 = l2->next;
        }
        
        while(l1 != NULL){
            int sum = l1->val + carry;
            carry = sum / 10;
            int value = sum % 10;
            ListNode* newNode = new ListNode(value);
            tail->next = newNode;
            tail = newNode;
            
            l1 = l1->next;
        }
        
        while(l2 != NULL){
            int sum = l2->val + carry;
            carry = sum / 10;
            int value = sum % 10;
            ListNode* newNode = new ListNode(value);
            tail->next = newNode;
            tail = newNode;
            
            l2 = l2->next;
        }
        
        if(carry != 0){
            ListNode* newNode = new ListNode(carry);
            tail->next = newNode;
            tail = newNode;
        }
        
        return head;*/
        --------------------------------------------------------------
        
        ListNode* head = NULL;
        ListNode* tail = NULL;
        int carry = 0;
        
        
        while(l1 != NULL || l2 != NULL){
            
            int l1Val = 0, l2Val = 0;
            if(l1)
                l1Val = l1->val;
            if(l2)
                l2Val = l2->val;
            
            int sum = l1Val + l2Val + carry;
            int nodeValue = sum % 10;
            carry = sum / 10;
            
            ListNode* newNode = new ListNode(nodeValue);
            
            if(head == NULL){
                head = newNode;
                tail = newNode;
                l1 = l1->next;
                l2 =l2->next;
                continue;
            }
            
            tail->next = newNode;
            tail = newNode;
            
            if(l1)
              l1 = l1->next;
            if(l2)
              l2 = l2->next;
        }
        
      
        if(carry != 0){
            ListNode* newNode = new ListNode(carry);
            tail->next = newNode;
            tail = newNode;
        }
        
        tail->next = NULL;
        
        return head;
    }
};
