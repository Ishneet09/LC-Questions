class Solution {
public:
    string customSortString(string order, string s) {
     
        if(order.size() == 0 && s.size() == 0)
            return "";
        
        if(order == s)
            return s;
        
        if(order.size() == 0)
            return s;
        
        if(s.size() == 0)
            return "";
        
        // we want the order of chars not in order to be maintained so that we can append them later on => use map & not unordered map
        map<char, int>sMap;
        
        // a char could be present for more than one time
        for(char c: s){
            sMap[c]++;
        }
        
        string newS = "";
        
        // follow the order of order and concatenate those chars of order which occur in s as per their freq while maintaing their order.
        for(char c: order){
            if(sMap.count(c) > 0){
                int freq = sMap[c];
                
                while(freq > 0){
                    newS += c;
                    freq--;
                }
                sMap.erase(c);
            }
            else{
                continue;
            }
        }
        
        // append chars of s which were not in order
        for(auto it: sMap){
            int freq = it.second;
            char c = it.first;
            
            while(freq > 0){
                newS += c;
                freq--;
            }
        }
        return newS;
    }
};
