// There are only two islands. We are intreesed in finding the min numner of zereos to flip to connect the two islands
// Min number of zeros def lies on the smallest path from island 1 to island2.
// so if we find the first island and start travelling from it using BFS to the other island, then we are sure to land on the sec island via the smallest path and we can find the min number of zeros.
/*
1. DFS to find the first island. Mark all its cells with say -1. Put cells of the first island in Q
2. Using the two-layer Q traversal, pick each cell and start BFS. At the end of each inner traversal, you would be one step closer to the next island. 
3. Keep inserting cells in it unless you reach the cell with grid[i][j] = 1;
4. NOTE: You need to stop after the first island is found completely and for that you'll need a boolean variable.
*/
class Solution {
private:

    void traverseIsland(vector<vector<int>>& grid, int i, int j, queue<pair<int, int>>& gridQ){
        
        if(i < 0 || j < 0 || i >= grid.size() || j >= grid[0].size())
            return;
        
        if(grid[i][j] != 1)
            return;
        
        gridQ.push({i, j});
        grid[i][j] = -1;
        
        traverseIsland(grid, i + 1, j, gridQ);
        traverseIsland(grid, i - 1, j, gridQ);
        traverseIsland(grid, i, j - 1, gridQ);
        traverseIsland(grid, i, j + 1, gridQ);
    }
    
public:
    int shortestBridge(vector<vector<int>>& grid) {
     
       if(grid.size() == 0)
            return 0;

        int rows = grid.size();
        int columns = grid[0].size();
        
        queue<pair<int, int>>gridQ;
        bool islandFound = false;
        
        for(int i = 0; i < rows && !islandFound; i++){
            for(int j = 0; j < columns; j++){
                if(grid[i][j] == 1){
                    traverseIsland(grid, i, j, gridQ);
                    islandFound = true;
                    break;
                }
            }
        }
        
        int minZeros = 0;
        vector<vector<int>>directions = {{0, 1}, {0, -1}, {-1, 0}, {1, 0}};
        
        while(gridQ.size() != 0){
            int size = gridQ.size();
            
            for(int i = 0; i < size; i++){
                auto front = gridQ.front();
                gridQ.pop();
                
                int x = front.first;
                int y = front.second;
                
                for(auto direction: directions){
                    int newX = x + direction[0];
                    int newY = y + direction[1];
                    
                    if(newX < 0 || newY < 0 || newX >= rows || newY >= columns)
                        continue;
                    
                    if(grid[newX][newY] == -1)
                        continue;
                    
                    if(grid[newX][newY] == 1)
                        return minZeros;
                    
                    gridQ.push({newX, newY});
                    grid[newX][newY] = -1;
                }
            }
            minZeros++;
        }
        
        return minZeros;
    }
};
