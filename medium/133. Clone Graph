/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:

     Node* cloneGraph(Node* node) {
        if(node == NULL)
            return NULL;
        
        if(node->neighbors.size() == 0){
            Node* newnode = new Node(node->val);
            return newnode;
        }
        
         unordered_map<Node*, Node*>mapping;
         queue<Node*>q;
         Node* clonednode = new Node(node->val);
         
         mapping[node] = clonednode;
         q.push(node);
         
         while(q.size() != 0){
             Node* currNode = q.front();
             q.pop();
             
             for(auto i:currNode->neighbors){
                 Node*newNode = new Node(i->val);;
                 if(mapping.find(i) == mapping.end()){
                     q.push(i);
                     mapping[i] = newNode;
                 }
                   mapping[currNode]->neighbors.push_back(mapping[i]);
             }
         }
        return clonednode;
    }
};
