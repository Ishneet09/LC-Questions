You have a graph of n nodes. You are given an integer n and an array edges where edges[i] = [ai, bi] indicates that there is an edge between ai and bi in the graph.

Return the number of connected components in the graph.

Input: n = 5, edges = [[0,1],[1,2],[3,4]]
Output: 2

Input: n = 5, edges = [[0,1],[1,2],[2,3],[3,4]]
Output: 1

-----------DFS Solution----------
class Solution {
public:
    
    void dfs(int start, vector<vector<int>>& graph, vector<bool>& visited){
        visited[start] = true;
        
        for(int n: graph[start]){
            if(!visited[n])
                dfs(n, graph, visited);
        }
        return;
    }
    
    
    int countComponents(int n, vector<vector<int>>& edges) {
        if(n == 0)
            return 0;
        
        if(n != 0 && edges.size() == 0)
            return n;
        
        vector<bool>visited(n, false);
        
        vector<vector<int>>graph(n, vector<int>(0));
        
        for(auto edge: edges){
            int from = edge[0];
            int to = edge[1];
            
            graph[from].push_back(to);
            graph[to].push_back(from);
        }
        
        int components = 0;
        
        for(int i = 0; i < n; i++){
            if(!visited[i]){
                dfs(i, graph, visited);
                components++;
            }
        }
        
        return components;
    }
};



-----------Disjoint Set Union------------

Approach 2: Disjoint Set Union (DSU)
Imagine we have a graph with N vertices and 0 edges. The number of connected components will be N in that graph.


Let's now add the edge from vertex 1 to vertex 2. This will decrease the number of components by 1. This is because vertices 1 and 2 are now in the same component.


When we then add the edge from vertex 2 to vertex 3, the number of components will decrease by 1 again.



However, this pattern will not continue when we add the edge from vertex 1 to vertex 3. The number of components will not change because vertices 1, 2, and 3 are already in the same component.



The above observation is the main intuition behind the DSU approach.

Algorithm

Initialize a variable count with the number of vertices in the input.
Traverse all of the edges one by one, performing the union-find method combine on each edge. If the endpoints are already in the same set, then keep traversing. If they are not, then decrement count by 1.
After traversing all of the edges, the variable count will contain the number of components in the graph.


class Solution {
public:
    int find(vector<int> &representative, int vertex) {
        if (vertex == representative[vertex]) {
            return vertex;
        }
        
        return representative[vertex] = find(representative, representative[vertex]);
    }
    
    int combine(vector<int> &representative, vector<int> &size, int vertex1, int vertex2) {
        vertex1 = find(representative, vertex1);
        vertex2 = find(representative, vertex2);
        
        if (vertex1 == vertex2) {
            return 0;
        } else {
            
            if (size[vertex1] > size[vertex2]) {
                size[vertex1] += size[vertex2];
                representative[vertex2] = vertex1;
            } else {
                size[vertex2] += size[vertex1];
                representative[vertex1] = vertex2;
            }
            return 1;
        }
    }

    int countComponents(int n, vector<vector<int>>& edges) {
        vector<int> representative(n), size(n);
        
        for (int i = 0; i < n; i++) {
            representative[i] = i;
            size[i] = 1;
        }
        
        int components = n;
        for (int i = 0; i < edges.size(); i++) {
            components -= combine(representative, size, edges[i][0], edges[i][1]);
        }

        return components;
    }
};




Complexity Analysis of DSU

Here EE = Number of edges, VV = Number of vertices.

Time complexity: O(E\cdotα(n))O(E⋅α(n)).

Iterating over every edge requires O(E)O(E) operations, and for every operation, we are performing the combine method which is O(α(n))O(α(n)), where α(n) is the inverse Ackermann function.

Space complexity: O(V)O(V).

Storing the representative/immediate-parent of each vertex takes O(V)O(V) space. Furthermore, storing the size of components also takes O(V)O(V) space.
