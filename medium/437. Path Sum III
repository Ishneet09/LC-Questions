/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
   
    int calculateSumAtNode(TreeNode* root, int sum){
        if(root == NULL)
            return 0;
        
        // check if the root's value is equal to sum=> you've found the path with the valid sum
        // before sending the sum down, make sure to decrement the current root' value
        return (root->val == sum) + calculateSumAtNode(root->left, sum - root->val) + calculateSumAtNode(root->right, sum - root->val);
    }
    
    
    int pathSum(TreeNode* root, int sum) {
        
        if(root == NULL)
            return 0;
        
        // at every node, we call calSum() to check the sum at every path from that node and since we are interested in the number of paths, as soon as we find a sum at any node, we will return true(1) and that counts one path and we simple recurse for left and right and call calSum()
        
        return calculateSumAtNode(root, sum) + pathSum(root->left, sum) + pathSum(root->right, sum);
        
    }
};
