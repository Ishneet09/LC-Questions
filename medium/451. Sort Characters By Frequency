-------------------[PRIORITY QUEUE - O(L LogL)]--------------


class Solution {
public:
    string frequencySort(string s) {
        if(s.size() == 0)
            return "";
        
        unordered_map<char, int>map;
        
        for(int i = 0; i < s.size(); i++){
            map[s[i]]++;
        }
        
        priority_queue<pair<int, char>>pq;
        
        for(auto it: map){
            pq.push({it.second, it.first});
        }
        
        string result = "";
        
        while(pq.size() != 0){
            pair<int, char>temp = pq.top();
            pq.pop();
            int frq = temp.first;
            char ch = temp.second;
            
            while(frq != 0){
                result += ch;
                frq--;
            }
        }
        return result;
    }
};





---------------------[BUCKET SORT - O(L)]-------------------------

        if(s.size() == 0)
            return "";
        
        unordered_map<char, int>stringCount;
        
        for(char c: s){
            stringCount[c]++;
        }
        
        vector<vector<char>>buckets(s.size() + 1);
        
        for(auto it: stringCount){
            int bucketNumber = it.second;
            char character = it.first;
            
            buckets[bucketNumber].push_back(character);
        }
        
        string sortedStr = "";
        
        for(int bNumber = buckets.size() - 1; bNumber >= 1; bNumber--){
            
            if(buckets[bNumber].size() == 0)
                continue;
            
            for(char c: buckets[bNumber]){
                int freq = bNumber;
                while(freq > 0){
                    sortedStr += c;
                    freq--;
                }
            }
        }
        
        return sortedStr;
