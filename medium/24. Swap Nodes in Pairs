/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        
        if(head == NULL)
            return NULL;
        if(head->next == NULL)
            return head;
        if(head->next->next == NULL){
            ListNode* temp = head->next;
            temp->next = head;
            head->next = NULL;
            return temp;
        }
        
        ListNode* pairPtr1 = head;
        ListNode* pairPtr2 = head->next;
        ListNode* newtemp = pairPtr2;
        ListNode* nextPairPtr = head->next->next;
        
        while(pairPtr1 != NULL && nextPairPtr != NULL){
            pairPtr2->next = pairPtr1;
            pairPtr1->next = nextPairPtr->next;
            
            if(nextPairPtr != NULL && nextPairPtr->next != NULL){
                pairPtr1 = nextPairPtr;
                pairPtr2 = nextPairPtr->next;
                nextPairPtr = nextPairPtr->next->next;
            }
            else
                break;
        }
        
        if(nextPairPtr == NULL){
            pairPtr2->next = pairPtr1;
            pairPtr1->next = nextPairPtr;
        }
        
        if(nextPairPtr != NULL){
            pairPtr1->next = nextPairPtr;
            nextPairPtr->next = NULL;
        }
        
        return newtemp;;
    }
};
