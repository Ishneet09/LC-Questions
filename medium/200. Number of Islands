-----------DFS SOLUTION----------

class Solution {
public:
    void traverseIslands(vector<vector<char>>&grid, int i, int j, int rows, int cols){
        if(i < 0 || j < 0 || i >= rows || j >= cols || grid[i][j] == '0')
            return;
        grid[i][j] = '0';
        traverseIslands(grid, i - 1, j, rows, cols);
        traverseIslands(grid, i + 1, j, rows, cols);
        traverseIslands(grid, i, j - 1, rows, cols);
        traverseIslands(grid, i, j + 1, rows, cols);
        
        return;
    }
    
    
    int numIslands(vector<vector<char>>& grid) {
        int rows = grid.size();
        if(rows == 0)
            return 0;
        int cols = grid[0].size();
        
        int islands = 0;
        
        for(int i = 0; i < rows; i++){
            for(int j = 0; j < cols; j++){
                if(grid[i][j] == '1'){
                traverseIslands(grid, i, j, rows, cols);
                islands++;
                }
            }
        }
        return islands;
    }
};



-------------BFS SOLUTION--------------

if(grid.size() == 0)
            return 0;
        
        int numberIslands = 0;
        
        int rows = grid.size();
        int columns = grid[0].size();
        
        for(int i = 0; i < rows; i++){
            for(int j = 0; j < columns; j++){
                
                if(grid[i][j] == '1'){
                    queue<pair<int, int>>bfs;
                    bfs.push({i, j});
                    
                    vector<vector<int>>dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
                    
                    while(bfs.size() != 0){
                        
                        auto start = bfs.front();
                        bfs.pop();
                        int row = start.first;
                        int col = start.second;
                        
                        //grid[row][col] = '0';
                        
                        for(auto v: dirs){
                            int newRow = row + v[0];
                            int newCol = col + v[1];
                            
                            if(newRow < 0 || newCol < 0 || newRow >= rows || newCol >= columns)
                                continue;
                            if(grid[newRow][newCol] == '0')
                                continue;
                            
                            grid[newRow][newCol] = '0';

                            bfs.push({newRow, newCol});
                        }
                        
                    }
                    
                    numberIslands++;
                }
                
            }
        }
        
        return numberIslands;
