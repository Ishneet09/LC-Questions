class RandomizedSet {
private:

    // list for const TC for getRandom(), map for other two
    vector<int>list;
    unordered_map<int, int>numMap;
    
public:
    RandomizedSet() {
        
    }
    
    bool insert(int val) {
        if(numMap.count(val) == 0){
            // order is imp
            numMap[val] = list.size();
            list.push_back(val);
            return true;
        }
        return false;
    }
    
    bool remove(int val) {
        if(numMap.count(val) > 0){
            // for delete, swap the val and last element b/c this way, we'll dlt last element from vector in const tc
            int valIndex = numMap[val];
            int lastIndex = list.size() - 1;
            swap(list[lastIndex], list[valIndex]);
            // update map after swap
            numMap[list[valIndex]] = valIndex;
            numMap[val] = lastIndex;
            // remove from list and map
            numMap.erase(val);
            list.pop_back();
            return true;
        }
        return false;
    }
    
    int getRandom() {
        int index = rand() % list.size();
        return list[index];
    }
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet* obj = new RandomizedSet();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */
