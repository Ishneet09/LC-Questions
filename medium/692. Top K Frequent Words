class Solution {
public:
    
    struct compare{
      
    bool operator()(pair<int, string>& p1, pair<int, string>& p2){
        if(p1.first == p2.first)
            return p1.second > p2.second;
        
        return p1.first < p2.first;
      }
  };
   
    
    
    vector<string> topKFrequent(vector<string>& words, int k) {
        if(words.size() == 0)
            return {};
        
        unordered_map<string, int>keeper;
        
        for(int i = 0; i < words.size(); i++){
            keeper[words[i]]++;
        }
        
        priority_queue<pair<int, string>, vector<pair<int, string>>, compare>pq;
        
        for(auto it: keeper){
            pq.push({it.second, it.first});
        }
        
        vector<string>ans;
        
        while(k > 0){
            auto p = pq.top();
            pq.pop();
            ans.push_back(p.second);
            k--;
        }
        
        return ans;
    }
};
