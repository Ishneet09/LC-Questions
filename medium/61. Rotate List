/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    
    ListNode* processLast(ListNode* head){
        if(head == NULL)
            return NULL;
        
        ListNode* temp = head;
        ListNode* prev = NULL;
        
        while(temp->next != NULL){
            prev = temp;
            temp = temp->next;
        }
        
        if(prev)
          prev->next = NULL;
        
        return temp;
        
    }
    
    
    int len(ListNode* head){
        ListNode*temp = head;
        
        int n = 0;
        
        while(temp != NULL){
            n++;
            temp = temp->next;
        }
        
        return n;
    }
    
    
    ListNode* rotateRight(ListNode* head, int k) {
        
        if(head == NULL)
            return NULL;
        
        if(head->next == NULL)
            return head;
        
        if(k == 0)
            return head;
        
        ListNode* newHead = head;
        
        // to keep k < len of ll to reduct time comp
        int newK = k % len(head);
        
        while(newK > 0){
            ListNode* headCopy = newHead;
            ListNode* lastNode = processLast(newHead);
            lastNode->next = headCopy;
            newHead = lastNode;
            newK--;
        }
        return newHead;
    }
};
