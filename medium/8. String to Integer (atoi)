class Solution {
public:
    int myAtoi(string s) {
        
        if(s.size() == 0)
            return 0;
        
        int sPtr = 0;
        
        // remove leading white spaces
        while(sPtr < s.size() && s[sPtr] == ' '){
            sPtr++;
        }
        
        // incorporate the sign
        bool isNegative = false;
        
        if(s[sPtr] == '+' || s[sPtr] == '-'){
            isNegative = s[sPtr] == '-' ? true : false;
             // move to next char after sign
            sPtr++;
        }
        
        // remove leading 0s
        while(sPtr < s.size() && s[sPtr] == '0'){
            sPtr++;
        }
        
        // start with the actual number until a non-digit char is reached
        long double number = 0;
        while(sPtr < s.size() && s[sPtr] >= '0' && s[sPtr] <= '9'){
            int digit = s[sPtr] - '0';
            number = number * 10 + digit;
            sPtr++;
        }
        
        // add sign to the number formed
        number = isNegative ? -number : number;
        
        // clamping overflows
        if(number < INT_MIN)
            return INT_MIN;
        
        if(number > INT_MAX)
            return INT_MAX;
        
        return number;
    }
};
