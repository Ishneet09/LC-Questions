class Solution {
public:
    bool isValid(int neighbourI, int neighbourJ, int n){
        if(neighbourI >= 0 && neighbourJ >= 0 && neighbourI < n && neighbourJ < n)
            return true;
        
        return false;
    }
    
    
    int maxDistance(vector<vector<int>>& grid) {
        
        int n = grid.size();
        
        vector<vector<int>>visited(n, vector<int>(n, 0));
        vector<vector<int>>distance(n, vector<int>(n, 0));
        
        queue<pair<int, int>>q;
        
        vector<int>di = {0,0,1,-1};
        vector<int>dj = {1,-1,0,0};
        
        for(int i = 0 ; i < n ; i++){
            for(int j = 0; j < n; j++){
                // if you are on land
                if(grid[i][j] == 1){
                    visited[i][j] = 1;
                    q.push({i, j});
                }
            }
        }
        
        while(q.size() != 0){
            auto p = q.front();
            q.pop();
            
            int currI = p.first;
            int currJ = p.second;
            
            for(int k = 0; k < 4; k++){
                int neighbourI = currI + di[k];
                int neighbourJ = currJ + dj[k];
                
                if(isValid(neighbourI, neighbourJ, n) && visited[neighbourI][neighbourJ] == 0){
                    visited[neighbourI][neighbourJ] = 1;
                    distance[neighbourI][neighbourJ] = 1 + distance[currI][currJ];
                    q.push({neighbourI, neighbourJ});
                
                }
            }
        }
        
        int maxDistance = 0;
        
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                maxDistance = max(distance[i][j], maxDistance);
            }
        }
        
        return maxDistance == 0 ? -1 : maxDistance;
        
    }
};
