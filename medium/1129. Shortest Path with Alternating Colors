class Solution {
public:
    vector<int> shortestAlternatingPaths(int n, vector<vector<int>>& red_edges, vector<vector<int>>& blue_edges) {
        
        vector<vector<pair<int, int>>>graph(n);
        
        // 1 = red, 2 = blue
        
        for(auto e: red_edges){
            int from = e[0];
            int to = e[1];
            
            graph[from].push_back({to, 1});
        }
        
        for(auto e: blue_edges){
            int from = e[0];
            int to = e[1];
            
            graph[from].push_back({to, 2});
        }
        
        // to keep track of visited paths, value of 0 for pair=> not visited, value of 1=>visited
        map<pair<pair<int, int>, int>, int>visited;
        // distance vector
        vector<int>distance(n, INT_MAX);
        // queue for BFS- stores index + colour
        queue<pair<int, int>>q;
        
        q.push({0, -1});
        distance[0] = 0;
        
        // this is keeping track of every level=> after traversing all nodes at same level, we then increment count. therefore for loop in queue.
        int count = 1;
        
        while(q.size() != 0){
            
            int size = q.size();
            
            for(int i = 0; i < size; i++){
            auto p = q.front();
            q.pop();
            
            int currNode = p.first;
            int currColour = p.second;
            
            for(auto neighbour: graph[currNode]){
                int neighbourNode = neighbour.first;
                int neighbourColour = neighbour.second;
                
                if(visited[{{currNode, neighbourNode},neighbourColour}] == 0 && currColour != neighbourColour){
                    distance[neighbourNode] = min(distance[neighbourNode], count);
                    visited[{{currNode, neighbourNode},neighbourColour}] = 1;
                    q.push({neighbourNode, neighbourColour});
                }
            }
        }
            count++;
      }
        
        for(int i = 0; i < n; i++){
            if(distance[i] == INT_MAX)
                distance[i] = -1;
        }
        
        return distance;
    }
};
