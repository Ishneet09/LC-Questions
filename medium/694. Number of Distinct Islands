class Solution {
public:
    
    void dfs(vector<vector<int>>& grid, int i, int j, int rows, int columns, vector<pair<int, int>>& currentIsland){
        if(i < 0 || j < 0 || i >= rows || j >= columns || grid[i][j] == 0)
            return;
        
        grid[i][j] = 0;
        currentIsland.push_back({i, j});
        
        dfs(grid, i + 1, j, rows, columns, currentIsland);
        dfs(grid, i - 1, j, rows, columns, currentIsland);
        dfs(grid, i, j + 1, rows, columns, currentIsland);
        dfs(grid, i, j - 1, rows, columns, currentIsland);
    }
    
    
    
    void translateToLeft(vector<pair<int, int>>& currentIsland){
        sort(currentIsland.begin(), currentIsland.end());
        
        int x_offset = currentIsland[0].first;
        int y_offset = currentIsland[0].second;
        
        for(auto& p: currentIsland){
            p.first = p.first - x_offset;
            p.second = p.second - y_offset;
        }
        
        return;
    }
    
    
    
    int numDistinctIslands(vector<vector<int>>& grid) {
        if(grid.size() == 0)
            return 0;
        
        int rows = grid.size();
        int columns = grid[0].size();
        
        set<vector<pair<int, int>>>uniqueIslands;
        
        for(int i = 0; i < rows; i++){
            for(int j = 0; j < columns; j++){
                if(grid[i][j] == 1){
                    vector<pair<int, int>>currentIsland;

                    dfs(grid, i, j, rows, columns, currentIsland);
                    translateToLeft(currentIsland);
                    uniqueIslands.insert(currentIsland);
                }
            }
        }
        
        return uniqueIslands.size();
        
    }
};
