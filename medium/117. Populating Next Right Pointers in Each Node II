/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        if(root == NULL)
            return NULL;
        
        queue<Node*>q;
        
        q.push(root);
        q.push(NULL);
        
        Node* prev;
        Node* nextToPrev;
        
        while(q.size() != 0){
            prev = q.front();
            q.pop();
            
            if(q.size() != 0)
                nextToPrev = q.front();
            
            if(prev == NULL){
                if(q.size() == 0)
                    break;
                
                q.push(NULL);
                continue;
            }
            
            prev->next = nextToPrev;
            
            if(prev->left)
                q.push(prev->left);
            
            if(prev->right)
                q.push(prev->right);
        }
        
        return root;
    }
};
