class Solution {
public:
    bool canVisitAllRooms(vector<vector<int>>& rooms) {
        if(rooms.size() == 0)
            return 0;
        unordered_set<int>visited;
        queue<int>q;
        
        for(int i = 0; i < rooms[0].size(); i++){
            q.push(rooms[0][i]);
        }
        visited.insert(0);
        
        while(q.size() != 0){
            int front = q.front();
            q.pop();
            if(visited.find(front) == visited.end()){
                for(int i = 0; i < rooms[front].size(); i++){
                    q.push(rooms[front][i]);
                }
            }
            visited.insert(front);
        }
        
        if(visited.size() == rooms.size())
            return true;
        return false;
    }
};
