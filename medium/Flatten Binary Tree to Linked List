/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    TreeNode* getRighmost(TreeNode* head){
        if(head == NULL)
            return NULL;
        
        while(head->right != NULL)
            head = head->right;
        
        return head;
    }
    
    TreeNode* flattenHelper(TreeNode* root) {
        if(root == NULL)
            return NULL;
        
        TreeNode* leftHead = flattenHelper(root->left);
        TreeNode* rtHead = flattenHelper(root->right);
        
        if(leftHead)
          root->right = leftHead;
        else
            root->right = rtHead;
        root->left = NULL;
        TreeNode* rightmost = getRighmost(leftHead);
        if(rightmost){
           rightmost->right = rtHead;
        }
        
        return root;
        
    }
    
    void flatten(TreeNode* root){
        flattenHelper(root);
    }
};
