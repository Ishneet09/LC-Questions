class Solution {
private:
    
    bool shippingPossible(vector<int>& weights, int days, int minCapacity){
        int sum = 0;
        // aaj bhi to shipping ho rahi hai
        int currentDays = 1;
        
        for(int i = 0; i < weights.size(); i++){
            sum += weights[i];
            
            if(sum > minCapacity){
                currentDays++;
                sum = weights[i];
            }
        }
        return currentDays <= days;
    }
    
public:
    int shipWithinDays(vector<int>& weights, int days) {
        
        if(weights.size() == 0)
            return 0;
        
        if(days == 0)
            return 0;
        
        int totalWeight = 0;
        int maxWeight = INT_MIN;
        
        for(int weight: weights){
            totalWeight += weight;
            maxWeight = max(maxWeight, weight);
        }
        
        // left will be maxWt b/c the min capacity must atleast be enough to hold the max weight
        int minWeightLimit = maxWeight;
        // min capacity will not exceed the total weight at any given point of time
        int maxWeightLimit = totalWeight;
        int minCapacity = 0;
        
        // minimise the number of searches
        // TC = N*log(sum of all weights), N= total number of weights
        while(minWeightLimit <= maxWeightLimit){
            int midWeight = minWeightLimit + (maxWeightLimit - minWeightLimit) / 2;
            
            if(shippingPossible(weights, days, midWeight)){
                minCapacity = midWeight;
                maxWeightLimit = midWeight - 1;
            }
            else{
                minWeightLimit = midWeight + 1;
            }
        }
        return minCapacity;
    }
};
