class Solution {
public:
    int leastInterval(vector<char>& tasks, int n) {
        
        if(tasks.size() == 0)
            return 0;
        
        if(n == 0)
            return tasks.size();
        
        //computing the frequency of each task
        unordered_map<char, int>taskCounter;
        
        for(char task: tasks){
            taskCounter[task]++;
        }
        
        // the task that occurs most frequently must always be processed first to prevent it from getting accumulated at the end and also to get the min cycles- else-baar baar cooldown period ata rahega end mei- which will inc the total cycles
        
        // max pq - we aren't concerned about which tasks are getting processed- the order doesn't matter. So we will insert only the task frequencies
        priority_queue<int>pq;
        
        int totalCycles = 0;
        
        for(auto it: taskCounter){
            pq.push(it.second);
        }
        
        // we will process until all tasks are processed
        while(pq.size() != 0){
            // will hold tasks processed in curr iteration of cooldown
            vector<int>temp;
            // time intervals incl n => 0 - 1, 1 - 2, 2 - 3,.. ,n - 1 -n => start from 0 to n
            for(int i = 0; i <= n; i++){
                
                if(pq.size() > 0){
                 temp.push_back(pq.top());
                 pq.pop();   
                }
            }
            
            // one instance of each task in temp is processed, inserting all those tasks that still have instances greater than 0
            for(int task: temp){
                if(task - 1 > 0)
                    pq.push(task - 1);
            }
            
            // if al tasks processed, then whatever tasks processed in last iteration to be added. else in every other iteration, we are processing n + 1 cycles
            totalCycles += pq.size() == 0 ? temp.size() : n + 1;
        }
        
        return totalCycles;
    }
};
