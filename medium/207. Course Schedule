class Solution {
public:
    bool isCyclic(vector<vector<int>>& graph, int sv, vector<int>& visited){
        if(visited[sv] == 2)
            return true;
        
        visited[sv] = 2;
        
        for(int i:graph[sv]){
            if(visited[i] != 1){
                if(isCyclic(graph, i, visited))
                    return true;
            }
        }
        visited[sv] = 1;
            return false;
    }
    
    
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        if(prerequisites.size() == 0)
            return true;
        
        vector<vector<int>>graph(numCourses);
        
        for(auto p:prerequisites){
            graph[p[0]].push_back(p[1]);
        }
        
        vector<int>visited(numCourses);
        
        for(int i = 0; i < numCourses; i++){
            visited[i] = 0;
        }
        
        for(int i = 0; i < numCourses; i++){
            if(visited[i] == 0 && isCyclic(graph, i, visited))
                return false;
        }
        return true;
    }
};
