class Solution {
public:
    
    double dfs(string s, string t, unordered_map<string, vector<pair<string, double>>>& graph, unordered_set<string>& st){
        if(s == t)
            return 1.0;
        
        
        st.insert(s);

        
        for(auto it: graph[s]){
            if(st.find(it.first) != st.end())
                continue;
            
            double d = dfs(it.first, t, graph, st);
            if(d > 0)
                return d * it.second;
        }
        
        return -1.0;
    }
    
    
    
    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {
        
        if(equations.size() == 0)
            return {};
        
        unordered_map<string, vector<pair<string, double>>>graph;
        
        int i = 0;
        for(auto v: equations){
            graph[v[0]].push_back({v[1], values[i]});
            graph[v[1]].push_back({v[0], 1.0 / values[i]});
            i++;
        }
        
        vector<double>ans;
        
        for(auto q: queries){
            string s = q[0];
            string t = q[1];
            unordered_set<string>st;

            if(graph.count(s) == 0 || graph.count(t) == 0)
                ans.push_back(-1.0);
            else
                ans.push_back(dfs(s, t, graph, st));
           
        }
        
        return ans;
        
    }
};
