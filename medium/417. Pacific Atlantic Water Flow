------------DFS Solution----------
class Solution {
public:
    
   
    void dfs(vector<vector<int>>& matrix, int i, int j, int prevVal, vector<vector<int>>& ocean){
        if(i < 0 || j < 0 || i >= matrix.size() || j >= matrix[0].size())
            return;
        if(ocean[i][j] == -1)
            return;
        if(matrix[i][j] < prevVal)
            return;
        
        //signifies ki paani aa gaya yaha
        ocean[i][j] = -1;
        
        dfs(matrix, i + 1, j, matrix[i][j], ocean);
        dfs(matrix, i - 1, j, matrix[i][j], ocean);
        dfs(matrix, i, j + 1, matrix[i][j], ocean);
        dfs(matrix, i, j - 1, matrix[i][j], ocean);
        
        return;
    }
    
    
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& matrix) {
       
         if(matrix.size() == 0)
            return {};
        
        int rows = matrix.size();
        int cols = matrix[0].size();
        
        vector<vector<int>>pacific(rows, vector<int>(cols, 0));
        vector<vector<int>>atlantic(rows, vector<int>(cols, 0));
        
        for(int i = 0; i < cols; i++){
            dfs(matrix, 0, i, INT_MIN, pacific);
            dfs(matrix, rows - 1, i, INT_MIN, atlantic);
        }
        
        for(int j = 0; j < rows; j++){
            dfs(matrix, j, 0, INT_MIN, pacific);
            dfs(matrix, j, cols - 1, INT_MIN, atlantic);
        }
        
        vector<vector<int>>ans;
        
        for(int i = 0; i < rows; i++){
            for(int j = 0; j < cols; j++){
                if(pacific[i][j] == -1 && atlantic[i][j] == -1)
                    ans.push_back({i, j});
            }
        }
        
         return ans;            
    
    }
};





----------------BFS Solution------------
class Solution {
public:
    void bfs(vector<vector<int>>& heights, queue<vector<int>>& q, vector<vector<int>>& ocean){
        
        vector<vector<int>> dir = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        
        while(q.size() != 0){
            auto currHeight = q.front();
            int x = currHeight[0];
            int y = currHeight[1];
            
            q.pop();
            
            for(int i = 0; i < dir.size(); i++){
                int nx = x + dir[i][0];
                int ny = y + dir[i][1];
                
                if(nx >= 0 && ny >= 0 && nx < heights.size() && ny < heights[0].size() && ocean[nx][ny] == 0 && heights[nx][ny] >= heights[x][y]){
                    q.push({nx, ny});
                    ocean[nx][ny] = 1;
                }
                
            }
        }
        return;
    }
    
    
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        if(heights.size() == 0)
            return {};
        int rows = heights.size();
        int cols = heights[0].size();
        
        vector<vector<int>>pacific(rows, vector<int>(cols, 0));
        vector<vector<int>>atlantic(rows, vector<int>(cols, 0));
        
        queue<vector<int>>pq;
        queue<vector<int>>aq;
        
        for(int i = 0; i < rows; i++){
            for(int j = 0; j < cols; j++){
                if(i == 0 || j == 0){
                    pq.push({i, j});
                    pacific[i][j] = 1;
                }
                if(i == rows - 1 || j == cols - 1){
                    aq.push({i, j});
                    atlantic[i][j] = 1;
                }
            }
        }
        
        bfs(heights, pq, pacific);
        bfs(heights, aq, atlantic);
        
        vector<vector<int>>ans;
        
        for(int i = 0; i < rows; i++){
            for(int j = 0; j < cols; j++){
                if(pacific[i][j] == 1 && atlantic[i][j] == 1)
                    ans.push_back({i,j});
            }
        }
        return ans;
    }
};
