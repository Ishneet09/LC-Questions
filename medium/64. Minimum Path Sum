// Recursive-

/*int helper(grid, int i, int j){
    if(i == grid.size() || j == grid[0].size())
        return INT_MAX;
    
    if(i == grid.size() - 1 && j == grid[0].size())
        return grid[i][j];
    
    return grid[i][j] + min(helper(grid, i + 1, j), helper(grid, i, j + 1));
}


int minPathSum(vector<vector<int>>& grid){
    if(grid.size() == 0)
        return 0;
    
    return helper(grid, 0, 0);
}*/





class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        if(grid.size() == 0)
            return 0;
        
        int r = grid.size();
        int c = grid[0].size();
        
        int dp[r][c];
        
        for(int i = r - 1; i >= 0; i--){
            for(int j = c - 1;  j >= 0; j--){
                
                if(i == r - 1 && j == c - 1)
                    dp[i][j] = grid[i][j];
                
                else if(i == r - 1)
                    dp[i][j] = grid[i][j] + dp[i][j + 1];
                
                else if(j == c - 1)
                    dp[i][j] = grid[i][j] + dp[i + 1][j];
                
                else if(i != r - 1 && j != c - 1)
                    dp[i][j] = grid[i][j] + min(dp[i + 1][j], dp[i][j + 1]);
                
            }
        }
        
        return dp[0][0];
    }
};
