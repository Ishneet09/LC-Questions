/*Given an array of meeting time intervals intervals where intervals[i] = [starti, endi], return the minimum number of conference rooms required.

 

Example 1:

Input: intervals = [[0,30],[5,10],[15,20]]
Output: 2
Example 2:

Input: intervals = [[7,10],[2,4]]
Output: 1*/


class Solution {
public:
    static bool cmp(vector<int>& v1, vector<int>& v2){
        if(v1[0] == v2[0])
            return v1[1] < v2[1];
        return v1[0] < v2[0];
    }
    
    
    int minMeetingRooms(vector<vector<int>>& intervals) {
        if(intervals.size() == 1)
            return 1;
        
        sort(intervals.begin(), intervals.end(), cmp);
        
        priority_queue<int, vector<int>, greater<int>>pq;
        
        pq.push(intervals[0][1]);
        
        for(int i = 1; i < intervals.size(); i++){
            vector<int>nextMeeting = intervals[i];
            
            int currStartTime = nextMeeting[0];
            int currEndTime = nextMeeting[1];
            int prevEndTime = pq.top();
            
            if(prevEndTime > currStartTime){
                pq.push(currEndTime);
            }
                
            
            else{
                pq.pop();
                pq.push(currEndTime);
            }
        }
        return pq.size();
    }
};
