/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
private:
    
    int diameterHelper(Node* root){
        if(root == NULL)
            return 0;
        
        vector<int>childDiameters;
        for(auto child: root->children){
            childDiameters.push_back(diameterHelper(child));
        }
        
        // exactly like binary tree but just calculate the two maxvalues
        int firstMax = 0;
        int secondMax = 0;
        
        for(int d: childDiameters){
            if(d > firstMax){
                secondMax = firstMax;
                firstMax = d;
            } else if(d > secondMax){
                secondMax = d;
            }
        }
        
        // do then what we do in binary tree
        diameterOfTree = max(diameterOfTree, secondMax + firstMax);
        
        return max(firstMax, secondMax) + 1;
    }
    
public:
    
    int diameterOfTree = 0;
    
    int diameter(Node* root) {
        if(root == NULL)
            return 0;
        
        if(root->children.size() == 0)
            return 0;
        
        diameterHelper(root);
        
        return diameterOfTree;
    }
};
