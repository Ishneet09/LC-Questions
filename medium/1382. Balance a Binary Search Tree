/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    
    void inorderTraversal(TreeNode* root, vector<int>& inorderVector){
        if(root == NULL)
            return;
        
        inorderTraversal(root->left, inorderVector);
        inorderVector.push_back(root->val);
        inorderTraversal(root->right, inorderVector);
        
        return;
    }
    
    TreeNode* makeBalancedTree(vector<int>& inorderVector, int left, int right){
        if(left > right)
            return NULL;
        
        int mid = left + (right - left) / 2;
        int rootValue = inorderVector[mid];
        TreeNode* root = new TreeNode(rootValue);
        
        root->left = makeBalancedTree(inorderVector, left, mid - 1);
        root->right = makeBalancedTree(inorderVector, mid + 1, right);
        
        return root;
    }
    
    
public:
    TreeNode* balanceBST(TreeNode* root) {
        if(root == NULL)
            return NULL;
        
        vector<int>inorderVector;
        
        inorderTraversal(root, inorderVector);
        
        return makeBalancedTree(inorderVector, 0, inorderVector.size() - 1);
    }
};
