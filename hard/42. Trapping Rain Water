-----------------O(N), O(N)-------------

class Solution {
public:
    int trap(vector<int>& height) {
        if(height.size() == 0)
            return 0;
        
        vector<int>leftMax(height.size());
        vector<int>rightMax(height.size());
        
        leftMax[0] = height[0];
        rightMax[height.size() - 1] = height[height.size() - 1];
        
        for(int i = 1; i < height.size(); i++){
            leftMax[i] = max(leftMax[i - 1], height[i]);
        }
        
        for(int i = height.size() - 2; i >= 0; i--){
            rightMax[i] = max(rightMax[i + 1], height[i]);
        }
        
        int water = 0;
        
        for(int i = 0; i < height.size(); i++){
            water += min(leftMax[i], rightMax[i]) - height[i];
        }
        
        return water;
    }
};


----------------O(N), O(1)----------------

if(height.size() == 0)
            return 0;
        
        int left = 0;
        int right = height.size() - 1;
        
        int maxLeft = 0;
        int maxRight = 0;
        
        int waterTrapped = 0;
        
        while(left < right){
            if(height[left] < height[right]){
                
                if(height[left] >= maxLeft)
                    maxLeft = height[left];
                else
                    waterTrapped += maxLeft - height[left];
                
                left++;
                    
            }
            
            else{
                if(height[right] >= maxRight)
                    maxRight = height[right];
                else
                    waterTrapped += maxRight - height[right];
                
                right--;
            }
        }
        
        return waterTrapped;
