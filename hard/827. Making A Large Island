class Solution {
private:
    
    // typical dfs - processing - marking islandId and area incrementing
    void findArea(vector<vector<int>>& grid, int i, int j, int rows, int columns, int& area, int& islandId){
        
        // if a cell is marked with islandId => we have already processed with
        if(i < 0 || j < 0 || i >= rows || j >= columns || grid[i][j] == 0 || grid[i][j] == islandId) 
            return;
        
        if(grid[i][j] == 1){
            grid[i][j] = islandId;
            area++;
        }
        
        findArea(grid, i - 1, j, rows, columns, area, islandId);
        findArea(grid, i + 1, j, rows, columns, area, islandId);
        findArea(grid, i, j - 1, rows, columns, area, islandId);
        findArea(grid, i, j + 1, rows, columns, area, islandId);
        
        return;
    }
    
    
public:
    int largestIsland(vector<vector<int>>& grid) {
        if(grid.size() == 0)
            return 0;
        
        // islandId, area
        // used so that we dont calculate the areas of the island again and gaian
        unordered_map<int, int>islandAreaMap;
        
        int rows = grid.size();
        int columns = grid[0].size();
        
        // initialise iD with 2 b/c islands are 1
        int islandId = 2;
        
        for(int i = 0; i < rows; i++){
            for(int j = 0; j < columns; j++){
                if(grid[i][j] == 1){
                    // accomodating the current cell into the area
                    int area = 0;
                    findArea(grid, i, j, rows, columns, area, islandId);
                    
                    // if the enrtire grid is filled with 1s
                    if(area == rows * rows)
                        return area;
                    
                    islandAreaMap[islandId] = area;
                    islandId++;

                }
            }
        }
        
        int maxArea = INT_MIN;
        
        for(int i = 0; i < rows; i++){
            for(int j = 0; j < columns; j++){
                if(grid[i][j] == 0){
                    // we need this set b/c when we encounter a zero, there is a possiblilty of it being surrounded by bon-unique islands aroud it. So we might end up adding same area again and again. By taking a set, we won't do that
                    unordered_set<int>islands;
                    
                    if(i - 1 >= 0 && grid[i - 1][j] != 0)
                        islands.insert(grid[i - 1][j]);
                    if(i + 1 < rows && grid[i + 1][j] != 0)
                        islands.insert(grid[i + 1][j]);
                    if(j - 1 >= 0 && grid[i][j - 1] != 0)
                        islands.insert(grid[i][j - 1]);
                    if(j + 1 < columns && grid[i][j + 1] != 0)
                        islands.insert(grid[i][j + 1]);
                    
                    // initialise it with 1 to accomodate the toggled zero
                    int currentArea = 1;
                    
                    for(auto id: islands){
                        currentArea += islandAreaMap[id];
                    }
                    maxArea = max(maxArea, currentArea);
                }
            }
        }
        
        return maxArea;
    }
};
