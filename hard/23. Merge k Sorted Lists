/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size() == 0)
            return NULL;
        
        if(lists.size() == 1 && lists[0] == NULL)
            return NULL;
        
        priority_queue<pair<int, ListNode*>, vector<pair<int, ListNode*>>, greater<pair<int, ListNode*>>>pq;
        
        for(ListNode* ptr: lists){
            if(ptr != NULL)
                pq.push({ptr->val, ptr});
        }
        
        ListNode* head = NULL;
        ListNode* tail = NULL;
        
        while(pq.size() != 0){
            auto p = pq.top();
            pq.pop();
            
            if(head == NULL){
                head = p.second;
                tail = p.second;
                
                if(p.second->next != NULL)
                    pq.push({p.second->next->val, p.second->next});
                continue;
            }
            
            tail->next = p.second;
            tail = p.second;
            
            if(p.second->next != NULL)
                pq.push({p.second->next->val, p.second->next});
        }
        
        return head;
    }
};
