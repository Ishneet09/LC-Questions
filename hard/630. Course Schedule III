class Solution {
public:
    
    static bool cmp(vector<int>& v1, vector<int>& v2){
        if(v1[1] == v2[1])
           return v1[0] < v2[0];
        return v1[1] < v2[1];
    }
    
    int scheduleCourse(vector<vector<int>>& courses) {
        if(courses.size() == 1){
            if(courses[0][0] <= courses[0][1])
                return 1;
            return 0;
        }
        
        sort(courses.begin(), courses.end(), cmp);
        
        int currentTimeElapsed = 0;
        priority_queue<int>pq;
        
        for(auto course: courses){
            int duration = course[0];
            int deadline = course[1];
            
            if(duration <= deadline){
                if(currentTimeElapsed + duration <= deadline){
                    pq.push(duration);
                    currentTimeElapsed += duration;
                }
                else if(pq.top() > duration){
                    currentTimeElapsed -= pq.top();
                    currentTimeElapsed += duration;
                    pq.pop();
                    pq.push(duration);
                }
            }
        }
        return pq.size();
    }
};
