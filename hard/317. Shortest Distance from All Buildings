class Solution {
private:
    
    int bfs(vector<vector<int>>& grid, int i, int j, int totalHouses){
        
        vector<vector<int>>dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        
        int rows = grid.size();
        int columns = grid[0].size();
        
        int housesReached = 0;
        queue<pair<int, int>>q;
        vector<vector<bool>>visited(rows, vector<bool>(columns, false));
        
        visited[i][j] = true;
        q.push({i, j});
        
        int steps = 0;
        int totalMinDistance = 0;
        
        while(q.size() != 0 && housesReached != totalHouses){
            int size = q.size();
            
            for(int k = 0; k < size; k++){
                auto currPosition = q.front();
                q.pop();
                
                int x = currPosition.first;
                int y = currPosition.second;
                
                if(grid[x][y] == 1){
                    housesReached++;
                    totalMinDistance += steps;
                    continue;
                }
                
                for(auto direction: dirs){
                    int newX = x + direction[0];
                    int newY = y + direction[1];
                    
                    if(newX < 0 || newY < 0 || newX >= rows || newY >= columns)
                        continue;
                    
                    if(grid[newX][newY] == 2 || visited[newX][newY])
                        continue;
                    
                    q.push({newX, newY});
                    visited[newX][newY] = true;
                }
            }
            steps++;
        }
        
        if(housesReached != totalHouses){
            for(int i = 0; i < rows; i++){
                for(int j = 0; j < columns; j++){
                    if(grid[i][j] == 0 && visited[i][j]){
                        grid[i][j] = 2;
                    }
                }
            }
            return INT_MAX;
        }
        
        return totalMinDistance;
    }
    
public:
    int shortestDistance(vector<vector<int>>& grid) {
        
        if(grid.size() == 0)
            return 0;
        
        int rows = grid.size();
        int columns = grid[0].size();
        
        int totalHouses = 0;
        
        for(int i = 0; i < rows; i++){
            for(int j = 0; j < columns; j++){
                if(grid[i][j] == 1)
                    totalHouses++;
            }
        }
        
        int minDistance = INT_MAX;
        
        for(int i = 0; i < rows; i++){
            for(int j = 0; j < columns; j++){
                if(grid[i][j] == 0){
                    minDistance = min(minDistance, bfs(grid, i, j, totalHouses));
                }
            }
        }
        return minDistance == INT_MAX ? -1 : minDistance;
    }
};
