------------Recursive Solution-----------

// start - 0 => amount
// target - amount => make the amount 0
// ways - diff denomination coins
// min coins reqd
class Solution {
public:
    int coinChangeHelper(vector<int>& coins, int amount) {
        
        if(amount == 0)
            return 0;
     
        
        int minCoins = INT_MAX;
        int currCoins;
        
        for(int j = 0; j < coins.size(); j++){
            if(coins[j] <= amount){
              currCoins = coinChangeHelper(coins, amount - coins[j]);
            
              if(currCoins != INT_MAX)
                  minCoins = min(minCoins, currCoins + 1);
            }
        }
        
        return minCoins;
    }
    
    int coinChange(vector<int>& coins, int amount){
        
        
        int ans = coinChangeHelper(coins, amount, memo);

        
        if(ans == INT_MAX)
            return -1;
        
        return ans;
        
    }
};




-----------------Memoised Solution--------------

// start - 0 => amount
// target - amount => make the amount 0
// ways - diff denomination coins
// min coins reqd
class Solution {
public:
    int coinChangeHelper(vector<int>& coins, int amount, vector<int>& memo) {
        
        if(amount == 0)
            return 0;
        
        if(memo[amount] != -1)
            return memo[amount];
        
        int minCoins = INT_MAX;
        int currCoins;
        
        for(int j = 0; j < coins.size(); j++){
            if(coins[j] <= amount){
              currCoins = coinChangeHelper(coins, amount - coins[j], memo);
            
              if(currCoins != INT_MAX)
                  minCoins = min(minCoins, currCoins + 1);
            }
        }
        
         memo[amount] = minCoins;
        return memo[amount];
    }
    
    int coinChange(vector<int>& coins, int amount){
        
        
        // memo[i] depicts the min coins reqd for making amount i
        vector<int>memo(amount + 1, -1);
        
        int ans = coinChangeHelper(coins, amount, memo);

        
        if(ans == INT_MAX)
            return -1;
        
        return ans;
        
    }
};



----------Bottom up-----------

class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        
        if(amount == 0)
            return 0;
        // dp[i] indicateso the min number of coins reqd to sum to amount i. Bottom up approach- we find min coins for all values upto target
        
        vector<int>dp(amount + 1, amount + 1);
        dp[0] = 0;
        
        
        for(int curramount = 1; curramount <= amount; curramount++){
            for(int i = 0; i < coins.size(); i++){
                
                if(coins[i] <= curramount){
                    dp[curramount] = min(dp[curramount], dp[curramount - coins[i]] + 1);
                }
            }
        }
        
        return dp[amount] == amount + 1 ? -1 : dp[amount];
        
    }
};
