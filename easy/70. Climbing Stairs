  // Memoisation solution
    
     int* stairs;
    
     int helper(int n){
        if(n == 0)
            return 0;
        if(n == 1)
            return 1;
        if(n == 2)
            return 2;
        
        if(stairs[n] != -1)
            return stairs[n];
        
        int x = helper(n - 1);
        int y = helper(n - 2);
        
        stairs[n] = x + y;
        
        return x + y;
    }

    int climbStairs(int n) {
        if(n == 1)
            return 1;
        if(n == 2)
            return 2;
        
        stairs = new int[n + 1];
        
         for(int i = 0; i <= n; i++){
        stairs[i] = -1;
    }
        
       /* stairs[0] = 0;
        stairs[1] = 1;
        stairs[2] = 2;
        
        for(int i = 3; i <= n; i++){
            stairs[i] = stairs[i - 1] + stairs[i - 2];
        }*/
        
        return helper(n);
    }
};




//DP Solution-
int climbStairs(int n){
    if(n == 0)
        return 0;
    if(n == 1)
        return 1;
    if(n == 2)
        return 2;
    
    int stairs[n + 1];
    
     stairs[0] = 0;
     stairs[1] = 1;
     stairs[2] = 2;
        
    for(int i = 3; i <= n; i++){
          stairs[i] = stairs[i - 1] + stairs[i - 2];
    }
    
    return stairs[n];
}
