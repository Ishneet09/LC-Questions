class Solution {
public:
    int findJudge(int N, vector<vector<int>>& trust) {
        
        if(N == 1){
            return 1;
        }
        
        if(trust.size() == 0){
            return -1;
        }
        
        unordered_map<int, int>peopleTrustFrequency;
        
        for(int i = 0; i < trust.size(); i++){
            peopleTrustFrequency[trust[i][1]]++;
        }
        
        
        int judge = -1;
        
        for(auto judgeCandidate: peopleTrustFrequency){
            if(judgeCandidate.second == N - 1){
                judge = judgeCandidate.first;
            }
        }
        
            if(judge == -1)
                return -1;
            
            for(int i = 0; i < trust.size(); i++){
                if(judge == trust[i][0])
                    return -1;
            }
            
            return judge;
        
    }
};


-----------------Graph Solution------------much easier-------------

 vector<vector<int>>incoming(N + 1);
        vector<vector<int>>outgoing(N + 1);
        
        for(auto t: trust){
            int from = t[0];
            int to = t[1];
            
            outgoing[from].push_back(to);
            incoming[to].push_back(from);
        }
        
        int judge = -1;
        
        for(int i = 1; i <= N; i++){
            if(outgoing[i].size() == 0)
                judge = i;
        }
        
        if(judge != -1)
           return incoming[judge].size() ==  N - 1 ? judge : -1;
        
        return judge;
