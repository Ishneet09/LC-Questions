class Solution {
private:
    
    ListNode* reverseList(ListNode* head){
        ListNode* prev = NULL;
        ListNode* curr = head;
        ListNode* currNext = head->next;
        
        while(currNext != NULL){
            curr->next = prev;
            prev = curr;
            curr = currNext;
            currNext = currNext->next;
        }
        curr->next = prev;
        return curr;
    }
    
public:
    bool isPalindrome(ListNode* head) {
        
        if(head == NULL)
            return true;
        
        if(head->next == NULL)
            return true;
        
        ListNode* fast = head;
        ListNode* slow = head;
        ListNode* prev = NULL;
        
        
        while(fast != NULL && fast->next != NULL){
            prev = slow;
            slow = slow->next;
            fast = fast->next->next;
        }
        // if even, slow points to start of sec hald
        // if odd, slow points to middle node
        // prev tomark end of first half
        prev->next = NULL;
        
        ListNode* tempSlow = slow;
        ListNode* p1 = head;
        ListNode* p2 = reverseList(tempSlow);
        ListNode* tempP2 = p2;
        
        // we only go to the end of first half so that if the list is odd len, extra middle node can be removed
        while(p1 != NULL){
            if(p1->val != p2->val)
                return false;
            
            p1 = p1->next;
            p2 = p2->next;
        }
        
        // reconstructing the list- not necessary - but good to have
        ListNode* reverseHead = reverseList(tempP2);
        prev->next = reverseHead;
        
        return true;
    }
};
