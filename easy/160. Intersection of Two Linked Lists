/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    
    int getLength(ListNode* temp){
        int l = 0;
        
        while(temp != NULL){
            l++;
            temp = temp->next;
        }
        
        return l;
    }
    
    
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        
        if(headA == NULL || headB == NULL)
            return NULL;
        
        ListNode*tempA = headA;
        ListNode* tempB = headB;
        
        
        int l1 = getLength(tempA);
        int l2 = getLength(tempB);
        
        if(l1 > l2){
            int temp = l1 - l2;
            while(temp > 0){
                headA = headA->next;
                temp--;
            }
        }
        
        else if(l2 > l1){
            int temp = l2 - l1;
            while(temp > 0){
                headB = headB->next;
                temp--;
            }
        }
        
        while(headA != NULL && headB != NULL){
            if(headA == headB)
                return headA;
            
            headA = headA->next;
            headB = headB->next;
        }
        
        return NULL;
    }
};
