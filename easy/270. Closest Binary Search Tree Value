/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    
    void closestValueHelper(TreeNode* root, double target, int& closestVal){
        if(root == NULL)
            return;
        
        if(abs(target - root->val) < abs(target - closestVal)){
            closestVal = root->val;
        }
        
        // if root's val is > target, then there is a possiility f finding a value closer to target ie something less than root->val on left.
        if(root->val > target){
            closestValueHelper(root->left, target, closestVal);
        }
        
        // else go to right
        else{
            closestValueHelper(root->right, target, closestVal);
        }
        return;
    }
    
    
public:
    
    
    int closestValue(TreeNode* root, double target) {
        
        if(root == NULL)
            return -1;
        
        int closestVal = root->val;

        
        closestValueHelper(root, target, closestVal);
        
        return closestVal;
    }
};
